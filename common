#!/bin/bash
# Copyright (C) 2015-2016 DragonTC
#
# Licensed under the Apache License, Version 2.0 (the "License");
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Define Color Values
red=$(tput setaf 1) # red
grn=$(tput setaf 2) # green
blu=$(tput setaf 4) # blue
cya=$(tput setaf 6) # cyan
txtbld=$(tput bold) # Bold
bldred=${txtbld}$(tput setaf 1) # red
bldgrn=${txtbld}$(tput setaf 2) # green
bldblu=${txtbld}$(tput setaf 4) # blue
bldcya=${txtbld}$(tput setaf 6) # cyan
txtrst=$(tput sgr0) # Reset

###########################################################################
###########################################################################
#####                                                                 #####
#####            D R A G O N T C   B U I L D   S Y S T E M            #####
#####                                                                 #####
###########################################################################
###########################################################################

# Find Host OS and set OS specific variables
IS_DARWIN=$(uname -a | grep Darwin)
if [ -n "$IS_DARWIN" ]; then
  CPUS=$(sysctl hw.ncpu | awk '{print $2}')
  DATE=gdate
else
  CPUS=$(grep "^processor" /proc/cpuinfo | wc -l)
  DATE=date
fi;

# Optimize CPU Threads
JOBS=$(bc <<< "$CPUS+2");

# Set Prefix Path
PREFIX_PATH=$TOOLCHAIN_ROOT/out/$DTC_VERSION

# Function to make sure LLVM and friends are at the correct version.
sync() {
cd $TOOLCHAIN_ROOT/llvm && git reset --hard && git fetch $REMOTE_URL/llvm.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/tools/clang && rm -rf * && git reset --hard && git fetch $REMOTE_URL/clang.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/tools/lld && rm -rf * && git reset --hard && git fetch $REMOTE_URL/lld.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/tools/polly && rm -rf * && git reset --hard && git fetch $REMOTE_URL/polly.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/compiler-rt && rm -rf * && git reset --hard && git fetch $REMOTE_URL/compiler-rt.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/libcxxabi && rm -rf * && git reset --hard && git fetch $REMOTE_URL/libcxxabi.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/libcxx && rm -rf * && git reset --hard && git fetch $REMOTE_URL/libcxx.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/libunwind && rm -rf * && git reset --hard && git fetch $REMOTE_URL/libunwind.git $BRANCH && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/openmp && rm -rf * && git reset --hard && git fetch $REMOTE_URL/openmp.git $BRANCH && git checkout FETCH_HEAD;
}

# Function to clean tree
clean() {
if [ -d $TOOLCHAIN_ROOT/cmake ];
then
    rm -rf $TOOLCHAIN_ROOT/cmake;
fi;
if [ -d "$PREFIX_PATH" ];
then
    rm -rf $PREFIX_PATH;
    mkdir -p $PREFIX_PATH;
else
    mkdir -p $PREFIX_PATH;
fi;
}

# Function to shrink and finalize the toolchain
finalize() {
current_date=$(date "+%Y%m%d");
echo "DragonTC-$current_date" >> $PREFIX_PATH/VERSION;
}


# Function to build LLVM
build() {
export CC="gcc-5";
export CXX="g++-5";

# Speed up build with gold
export LD="ld.gold"

# Concatenate all flags
COMMON_CXX_FLAGS="-O3 -Wno-macro-redefined -pipe -pthread -fopenmp -g0 $OPT $LOCAL_CXX_FLAGS"
COMMON_C_FLAGS="-O3 -Wno-macro-redefined -pipe -pthread -fopenmp -g0 $OPT $LOCAL_C_FLAGS"

# Configure LLVM with CMAKE
mkdir $TOOLCHAIN_ROOT/cmake;
cd $TOOLCHAIN_ROOT/cmake;

cmake -DLINK_POLLY_INTO_TOOLS:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="$COMMON_CXX_FLAGS" -DCMAKE_C_FLAGS:STRING="$COMMON_C_FLAGS" -DLLVM_ENABLE_PIC:BOOL=ON -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX_PATH -DLLVM_PARALLEL_COMPILE_JOBS=$JOBS -DLLVM_PARALLEL_LINK_JOBS=$JOBS -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_WARNINGS:BOOL=OFF -DLLVM_ENABLE_WERROR:BOOL=ON -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_BUILD_DOXYGEN:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_BINUTILS_INCDIR:PATH=$TOOLCHAIN_ROOT/llvm/tools/binutils/include -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPOLLY_ENABLE_GPGPU_CODEGEN:BOOL=ON $TOOLCHAIN_ROOT/llvm;

# Find Time Before Build
START_TIME=$($DATE +%s);

# Build LLVM
if ! time cmake --build . -- -j$JOBS; then
  echo "";
  echo -e ${red} "*************************************" ${txtrst};
  echo -e ${red} "      ______      _ __         ____" ${txtrst};
  echo -e ${red} "     / ____/___ _(_) /__  ____/ / /" ${txtrst};
  echo -e ${red} "    / /_  / __ '/ / / _ \/ __  / /" ${txtrst};
  echo -e ${red} "   / __/ / /_/ / / /  __/ /_/ /_/" ${txtrst};
  echo -e ${red} "  /_/    \__,_/_/_/\___/\__,_/_/ " ${txtrst};
  echo -e ${red} "" ${txtrst};
  echo -e ${red} "   DragonTC has failed to compile!" ${txtrst};
  echo -e ${red} "*************************************" ${txtrst};
  exit 1;
else
  cmake --build . --target install -- -j$JOBS;
  finalize;
  # Echo Time if Build Finishes
  END_TIME=$($DATE +%s);
  tmin=$(( (END_TIME-START_TIME)/60 ));
  tsec=$(( (END_TIME-START_TIME)%60 ));
  echo -e "";
  echo -e ${grn} "*****************************************************" ${txtrst};
  echo -e ${grn} "     ______                      __     __       __" ${txtrst};
  echo -e ${grn} "    / ____/___  ____ ___  ____  / /__  / /____  / /" ${txtrst};
  echo -e ${grn} "   / /   / __ \/ __ '__ \/ __ \/ / _ \/ __/ _ \/ /" ${txtrst};
  echo -e ${grn} "  / /___/ /_/ / / / / / / /_/ / /  __/ /_/  __/_/" ${txtrst};
  echo -e ${grn} "  \____/\____/_/ /_/ /_/ .___/_/\___/\__/\___(_) " ${txtrst};
  echo -e ${grn} "                      /_/" ${txtrst};
  echo -e ${grn} "" ${txtrst};
  echo -e ${grn} "         DragonTC has compiled successfully!" ${txtrst};
  echo -e ${grn} "*****************************************************" ${txtrst};
  echo -e  "";
  echo -e ${bldgrn}"Total time elapsed:${txtrst} ${grn}$tmin minutes $tsec seconds"${txtrst};
  echo -e ${bldgrn}"Toolchain located at:${txtrst} ${grn}$PREFIX_PATH"${txtrst};
fi;

# Unset Local Variables
unset TOOLCHAIN_ROOT;
unset PREFIX_PATH;
unset OPT;
unset LOCAL_CXX_FLAGS;
unset LOCAL_C_FLAGS;
unset CC;
unset CXX;
unset LD;
}

$1
